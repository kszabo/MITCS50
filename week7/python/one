import numpy as np                  # for scientific computing
import matplotlib.pyplot as plt     # for generating plots
%matplotlib notebook

X_train = np.array([[1,1], [2, 2.5], [3, 1.2], [5.5, 6.3], [6, 9], [7, 6]])
Y_train = ['red', 'red', red', 'blue', 'blue', 'blue']

print(X_train[5, 0])
print(X_train[5, 1])

print(X_train[:, 0])
print(X_train[:, 1])

plt.figure()
plt.scatter(X_train[:, 0], X_train[:, 1], s = 170, color = Y_train[:])
plt.show()

X_test = np.array([3, 4])

plt.figure()
plt.scatter(X_train[:, 0], X_train[:, 1], s = 170, color = Y_train[:])
plt.scatter(X_test[0], X_test[1], s = 170, color = 'green')
plt.show()

# To run the Nearest Neighbor Classifier, define a distance function:
def dist(x, y):
    return np.sqrt(np.sum((x - y) ** 2))

# For each point in X_train we compute its distance to x_test
num = len(X_train)  # Number of points in X_train
distance = np.zeros(num)  # Numpy arrays of zeros
for i in range(num):
    distance[i] = dist(X_train[i], X_test)
print(distance)

# Choose the point in X_train with the minimal distance from X_new:
min_index = np.argmin(distance)  # Index with smallest distance
print(Y_train[min_index])

# Number of mistakes done in testing 100 images
num = len(X_train)
no_errors = 0
distance = np.zeros(num)
for j in range(1697, 1797):
    X_test = digits.data[j]
    for i in range(num):
        distance[i] = dist(X_train[i], X_test)
    min_index = np.argmin(distance)
    if Y_train[min_index] != digits.target[j]:
        no_errors += 1
print(no_errors)

